version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: logifin-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-logifin}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres123}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - logifin-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-logifin}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Server
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: logifin-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 4000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres123}
      DB_NAME: ${DB_NAME:-logifin}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:8080,http://34.93.247.3,http://34.93.247.3:4000,http://34.93.247.3:8080,https://*.netlify.app}
#      SMTP_HOST: ${SMTP_HOST}
#      SMTP_PORT: ${SMTP_PORT}
#      SMTP_USER: ${SMTP_USER}
#      SMTP_PASSWORD: ${SMTP_PASSWORD}
#      SMTP_FROM: ${SMTP_FROM}
    ports:
      - "4000:4000"
    volumes:
      - ./src/db/migrations:/app/src/db/migrations:ro
    networks:
      - logifin-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:4000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    driver: local

networks:
  logifin-network:
    driver: bridge
